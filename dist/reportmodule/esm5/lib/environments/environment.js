// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
export var environment = {
    production: false,
    encryptionKey: '97cc+XE5NTUVhWOrdxrESw==',
    decryptionKey: '97cc+XE5NTUVhWOrdxrESw==',
    reportDataLimit: 500,
    // BACKEND_URL: 'http://dev-rm.grouprm.net/reports/dashboard/',
    // REQUEST_URL: 'http://dev-rm.grouprm.net/reports/historydetails/',
    // CUSTOME_BACKEND_URL: 'http://dev-rm.grouprm.net/reports/custom-report/',
    // COMMON_URL: 'http://dev-rm.grouprm.net/reports/common/',
    // ROOT_BACKEND_URL:"http://localhost:8000/reports/"
    userType: null,
    airlineCode: null,
    BACKEND_URL: 'https://report-development.infinitisoftware.net/reports/dashboard/',
    REQUEST_URL: 'https://report-development.infinitisoftware.net/reports/historydetails/',
    CUSTOME_BACKEND_URL: 'https://report-development.infinitisoftware.net/reports/custom-report/',
    COMMON_URL: 'https://report-development.infinitisoftware.net/reports/common/',
    ROOT_BACKEND_URL: 'https://report-development.infinitisoftware.net/reports/',
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52aXJvbm1lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9yZXBvcnRtb2R1bGUvIiwic291cmNlcyI6WyJsaWIvZW52aXJvbm1lbnRzL2Vudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdGQUFnRjtBQUNoRiwwRUFBMEU7QUFDMUUsZ0VBQWdFO0FBQ2hFLE1BQU0sQ0FBQyxJQUFNLFdBQVcsR0FBRztJQUN6QixVQUFVLEVBQUUsS0FBSztJQUNqQixhQUFhLEVBQUUsMEJBQTBCO0lBQ3pDLGFBQWEsRUFBRSwwQkFBMEI7SUFDekMsZUFBZSxFQUFFLEdBQUc7SUFFcEIsK0RBQStEO0lBQy9ELG9FQUFvRTtJQUNwRSwyRUFBMkU7SUFDM0UsMkRBQTJEO0lBQzNELG9EQUFvRDtJQUVwRCxRQUFRLEVBQUUsSUFBSTtJQUNkLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLFdBQVcsRUFDVCxvRUFBb0U7SUFDdEUsV0FBVyxFQUNULHlFQUF5RTtJQUMzRSxtQkFBbUIsRUFDakIsd0VBQXdFO0lBQzFFLFVBQVUsRUFBRSxpRUFBaUU7SUFDN0UsZ0JBQWdCLEVBQUUsMERBQTBEO0NBTTdFLENBQUM7QUFFRjs7Ozs7O0dBTUc7QUFDSCxtRUFBbUUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgY2FuIGJlIHJlcGxhY2VkIGR1cmluZyBidWlsZCBieSB1c2luZyB0aGUgYGZpbGVSZXBsYWNlbWVudHNgIGFycmF5LlxyXG4vLyBgbmcgYnVpbGQgLS1wcm9kYCByZXBsYWNlcyBgZW52aXJvbm1lbnQudHNgIHdpdGggYGVudmlyb25tZW50LnByb2QudHNgLlxyXG4vLyBUaGUgbGlzdCBvZiBmaWxlIHJlcGxhY2VtZW50cyBjYW4gYmUgZm91bmQgaW4gYGFuZ3VsYXIuanNvbmAuXHJcbmV4cG9ydCBjb25zdCBlbnZpcm9ubWVudCA9IHtcclxuICBwcm9kdWN0aW9uOiBmYWxzZSxcclxuICBlbmNyeXB0aW9uS2V5OiAnOTdjYytYRTVOVFVWaFdPcmR4ckVTdz09JyxcclxuICBkZWNyeXB0aW9uS2V5OiAnOTdjYytYRTVOVFVWaFdPcmR4ckVTdz09JyxcclxuICByZXBvcnREYXRhTGltaXQ6IDUwMCxcclxuXHJcbiAgLy8gQkFDS0VORF9VUkw6ICdodHRwOi8vZGV2LXJtLmdyb3Vwcm0ubmV0L3JlcG9ydHMvZGFzaGJvYXJkLycsXHJcbiAgLy8gUkVRVUVTVF9VUkw6ICdodHRwOi8vZGV2LXJtLmdyb3Vwcm0ubmV0L3JlcG9ydHMvaGlzdG9yeWRldGFpbHMvJyxcclxuICAvLyBDVVNUT01FX0JBQ0tFTkRfVVJMOiAnaHR0cDovL2Rldi1ybS5ncm91cHJtLm5ldC9yZXBvcnRzL2N1c3RvbS1yZXBvcnQvJyxcclxuICAvLyBDT01NT05fVVJMOiAnaHR0cDovL2Rldi1ybS5ncm91cHJtLm5ldC9yZXBvcnRzL2NvbW1vbi8nLFxyXG4gIC8vIFJPT1RfQkFDS0VORF9VUkw6XCJodHRwOi8vbG9jYWxob3N0OjgwMDAvcmVwb3J0cy9cIlxyXG5cclxuICB1c2VyVHlwZTogbnVsbCxcclxuICBhaXJsaW5lQ29kZTogbnVsbCxcclxuICBCQUNLRU5EX1VSTDpcclxuICAgICdodHRwczovL3JlcG9ydC1kZXZlbG9wbWVudC5pbmZpbml0aXNvZnR3YXJlLm5ldC9yZXBvcnRzL2Rhc2hib2FyZC8nLFxyXG4gIFJFUVVFU1RfVVJMOlxyXG4gICAgJ2h0dHBzOi8vcmVwb3J0LWRldmVsb3BtZW50LmluZmluaXRpc29mdHdhcmUubmV0L3JlcG9ydHMvaGlzdG9yeWRldGFpbHMvJyxcclxuICBDVVNUT01FX0JBQ0tFTkRfVVJMOlxyXG4gICAgJ2h0dHBzOi8vcmVwb3J0LWRldmVsb3BtZW50LmluZmluaXRpc29mdHdhcmUubmV0L3JlcG9ydHMvY3VzdG9tLXJlcG9ydC8nLFxyXG4gIENPTU1PTl9VUkw6ICdodHRwczovL3JlcG9ydC1kZXZlbG9wbWVudC5pbmZpbml0aXNvZnR3YXJlLm5ldC9yZXBvcnRzL2NvbW1vbi8nLFxyXG4gIFJPT1RfQkFDS0VORF9VUkw6ICdodHRwczovL3JlcG9ydC1kZXZlbG9wbWVudC5pbmZpbml0aXNvZnR3YXJlLm5ldC9yZXBvcnRzLycsXHJcbiAgLy8gQkFDS0VORF9VUkw6ICdodHRwczovL3JlcG9ydC1kZXZlbG9wbWVudC5pbmZpbml0aXNvZnR3YXJlLm5ldC9yZXBvcnRzL2Rhc2hib2FyZC8nLFxyXG4gIC8vIFJFUVVFU1RfVVJMOiAnaHR0cHM6Ly9yZXBvcnQtZGV2ZWxvcG1lbnQuaW5maW5pdGlzb2Z0d2FyZS5uZXQvcmVwb3J0cy9oaXN0b3J5ZGV0YWlscy8nLFxyXG4gIC8vIENVU1RPTUVfQkFDS0VORF9VUkw6ICdodHRwczovL3JlcG9ydC1kZXZlbG9wbWVudC5pbmZpbml0aXNvZnR3YXJlLm5ldC9yZXBvcnRzL2N1c3RvbS1yZXBvcnQvJyxcclxuICAvLyBDT01NT05fVVJMOiAnaHR0cHM6Ly9yZXBvcnQtZGV2ZWxvcG1lbnQuaW5maW5pdGlzb2Z0d2FyZS5uZXQvcmVwb3J0cy9jb21tb24vJyxcclxuICAvLyBST09UX0JBQ0tFTkRfVVJMOlwiaHR0cHM6Ly9yZXBvcnQtZGV2ZWxvcG1lbnQuaW5maW5pdGlzb2Z0d2FyZS5uZXQvcmVwb3J0cy9cIlxyXG59O1xyXG5cclxuLypcclxuICogRm9yIGVhc2llciBkZWJ1Z2dpbmcgaW4gZGV2ZWxvcG1lbnQgbW9kZSwgeW91IGNhbiBpbXBvcnQgdGhlIGZvbGxvd2luZyBmaWxlXHJcbiAqIHRvIGlnbm9yZSB6b25lIHJlbGF0ZWQgZXJyb3Igc3RhY2sgZnJhbWVzIHN1Y2ggYXMgYHpvbmUucnVuYCwgYHpvbmVEZWxlZ2F0ZS5pbnZva2VUYXNrYC5cclxuICpcclxuICogVGhpcyBpbXBvcnQgc2hvdWxkIGJlIGNvbW1lbnRlZCBvdXQgaW4gcHJvZHVjdGlvbiBtb2RlIGJlY2F1c2UgaXQgd2lsbCBoYXZlIGEgbmVnYXRpdmUgaW1wYWN0XHJcbiAqIG9uIHBlcmZvcm1hbmNlIGlmIGFuIGVycm9yIGlzIHRocm93bi5cclxuICovXHJcbi8vIGltcG9ydCAnem9uZS5qcy9kaXN0L3pvbmUtZXJyb3InOyAgLy8gSW5jbHVkZWQgd2l0aCBBbmd1bGFyIENMSS5cclxuIl19